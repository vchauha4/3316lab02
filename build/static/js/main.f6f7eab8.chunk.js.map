{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","rows","columns","moves","currentX","currentY","playerTurn","winner","boardArray","x","y","counter","color","c","i","console","log","this","setState","prevState","map","column","cell","j","checkForWinner","rowArray","row","columnArray","push","onClick","onTurn","style","width","height","backgroundColor","border","cursor","display","flexDirection","Object","assign","styles","container","renderBoard","React","Component","padding","justifyContent","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEqBA,E,kDAGnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAK,EACLC,QAAS,EACTC,MAAO,GACPC,SAAU,KACVC,SAAS,KAETC,WAAY,MAEZC,OAAQ,KACNC,WAAY,CACV,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SACjD,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SACjD,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SACjD,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SACjD,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SACjD,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAlBtC,E,kDAwBnB,SAAeC,EAAEC,GAKf,IAHA,IAAIC,EAAS,EACTC,EAAM,KAEFC,EAAE,EAAEA,EAAE,EAAEA,IAChB,CACEF,EAAS,EACT,IAAI,IAAIG,EAAG,EAAGA,GAAG,EAAEA,IAEjBC,QAAQC,IAAI,KAAKH,EAAE,IAAKC,GACxBC,QAAQC,IAAIC,KAAKjB,MAAMQ,WAAWK,GAAGC,IACrCC,QAAQC,IAAIC,KAAKjB,MAAMQ,WAAWK,GAAGC,KAAMG,KAAKjB,MAAMQ,WAAWK,GAAGC,EAAE,IAClEG,KAAKjB,MAAMQ,WAAWK,GAAGC,KAAMG,KAAKjB,MAAMQ,WAAWK,GAAGC,EAAE,IAAO,UAAWG,KAAKjB,MAAMQ,WAAWK,GAAGC,KAEvGH,IACAI,QAAQC,IAAI,WAAWL,GACvBC,EAAMK,KAAKjB,MAAMQ,WAAWK,GAAGC,IAIrB,GAAVH,IACFI,QAAQC,IAAI,OACZC,KAAKC,SAAS,CAACX,OAAOK,KAc1BG,QAAQC,IAAI,S,oBAGd,SAAOP,EAAEC,GAAK,IAAD,OACXO,KAAKjB,MAAMI,SAAWK,EACtBQ,KAAKjB,MAAMK,SAAWK,EAKQ,QAA1BO,KAAKjB,MAAMM,YAAsD,UAA9BW,KAAKjB,MAAMQ,WAAWC,GAAGC,KAC9DO,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BX,WAAYW,EAAUX,WAAWY,KAAI,SAACC,EAAQP,GAAT,OACnCO,EAAOD,KAAI,SAACE,EAAMC,GAAP,OAAcT,IAAML,GAAKc,IAAMb,EAAI,EAAKV,MAAMM,WAAagB,YAI1EL,KAAKC,SAAS,CAACZ,WAAW,YAIE,WAA1BW,KAAKjB,MAAMM,YAAwD,UAA9BW,KAAKjB,MAAMQ,WAAWC,GAAGC,KAChEO,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BX,WAAYW,EAAUX,WAAWY,KAAI,SAACC,EAAQP,GAAT,OACnCO,EAAOD,KAAI,SAACE,EAAMC,GAAP,OAAcT,IAAML,GAAKc,IAAMb,EAAI,EAAKV,MAAMM,WAAagB,YAI1EL,KAAKC,SAAS,CAACZ,WAAW,W,gCAQ9B,WACEW,KAAKO,eAAeP,KAAKb,SAASa,KAAKZ,Y,yBAKzC,WAIE,IAJY,IAAD,OACX,EAA0BY,KAAKjB,MACzByB,GADN,EAAQxB,KAAR,EAAcC,QACG,IAFN,WAIDwB,GAER,IADA,IAAMC,EAAc,GALX,WAMCN,GAERM,EAAYC,KAAK,qBAAKC,QAAW,WAAK,EAAKC,OAAOJ,EAAIL,IAAWU,MAAS,CAACC,MAAO,MAAOC,OAAO,MAAOC,gBAAiB,EAAKlC,MAAMQ,WAAWkB,GAAKL,GAASc,OAAQ,mBAAoBC,OAAQ,eAFxLf,EAAS,EAAGA,EAAS,EAAKrB,MAAME,QAASmB,GAAS,EAAG,EAArDA,GAKVI,EAASG,KACP,qBAAKG,MAAU,CAACM,QAAS,OAAQC,cAAe,OAAhD,SAAyDX,MARnDD,EAAM,EAAGA,EAAMT,KAAKjB,MAAMC,KAAMyB,GAAO,EAAG,EAA1CA,GAWV,OACE,gCACE,8BACD,UAAWT,KAAKjB,MAAMO,SAEpBkB,O,oBAKP,WACE,IAAMM,EAASd,KAAKlB,MAAdgC,MAEN,OACE,qBAAKA,MAASA,EAAQQ,OAAOC,OAAO,GAAIC,EAAOC,UAAWX,GAAQU,EAAOC,UAAzE,SACE,8BAAMzB,KAAK0B,sB,GAxIcC,IAAMC,WA8IjCJ,EAAS,CACbC,UAAW,CACTT,OAAQ,OACRa,QAAS,EACTT,QAAS,OACTU,eAAgB,SAChBC,WAAY,WC1IDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6f7eab8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class App extends React.Component{ \n  \n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      rows:6,\n      columns: 7,\n      moves: [],\n      currentX: null,\n      currentY:null,\n      //red goes first\n      playerTurn: 'red',\n      //blank board\n      winner: null,\n        boardArray: [\n          ['white','white','white','white','white','white','white'],\n          ['white','white','white','white','white','white','white'],\n          ['white','white','white','white','white','white','white'],\n          ['white','white','white','white','white','white','white'],\n          ['white','white','white','white','white','white','white'],\n          ['white','white','white','white','white','white','white']\n        ],\n      \n    };\n    \n  }\n  checkForWinner(x,y){\n\n    let counter =0;\n    let color=null;\n\n    for(let c=0;c<6;c++)\n    {\n      counter =0;\n      for(let i =0; i<=6;i++)\n      {\n        console.log(\"H \"+c+\" \"+ i)\n        console.log(this.state.boardArray[c][i])\n        console.log(this.state.boardArray[c][i]===(this.state.boardArray[c][i+1]))\n        if((this.state.boardArray[c][i]===(this.state.boardArray[c][i+1]))&& 'white' !==this.state.boardArray[c][i]  )\n        {\n          counter++;\n          console.log(\"Line 45 \"+counter);\n          color=this.state.boardArray[c][i];\n        }\n\n      };\n      if (counter ==4){\n        console.log(\"WIN\")\n        this.setState({winner:color});\n      };\n\n    }\n   \n   \n   \n   \n    //componentDidUpdate(){\n    \n//};\n   \n\n\n    console.log(\"END\")\n  };\n   \n  onTurn(x,y)  {\n    this.state.currentX = x;\n    this.state.currentY = y;\n\n    \n\n    //if the current turn is red, we set the state of the boardArray of the clicked cell to 'red' and then we change turn to yellow\n    if (this.state.playerTurn === 'red' && this.state.boardArray[x][y]==='white'){\n      this.setState((prevState) => ({\n        boardArray: prevState.boardArray.map((column, i) =>\n          column.map((cell, j) => (i === x && j === y ? this.state.playerTurn : cell))\n        ),\n      }));\n      \n      this.setState({playerTurn:'yellow'});\n      \n    };\n    //if the current turn is yello, we set the state of the boardArray of the clicked cell to 'yellow' and then we change turn to red\n    if (this.state.playerTurn === 'yellow'&& this.state.boardArray[x][y]==='white'){\n      this.setState((prevState) => ({\n        boardArray: prevState.boardArray.map((column, i) =>\n          column.map((cell, j) => (i === x && j === y ? this.state.playerTurn : cell))\n        ),\n      }));\n  \n      this.setState({playerTurn:'red'});\n      \n    };\n    \n    \n    \n  };\n\n  componentDidUpdate(){\n    this.checkForWinner(this.currentX,this.currentY);\n  };\n  \n  \n\n  renderBoard(){\n    const { rows, columns } = this.state;\n    const rowArray = [];\n    //2D array renders the board \n    for ( let row = 0; row < this.state.rows; row += 1){\n      const columnArray = [];\n      for ( let column = 0; column < this.state.columns; column +=1){\n      \n        columnArray.push(<div onClick = {()=>{this.onTurn(row,column)}}  style = {{width: '7vw', height:'7vw', backgroundColor: this.state.boardArray[row][column], border: '1px solid  black', cursor: 'pointer'}}></div>);\n                \n      }\n      rowArray.push(\n        <div style =  {{display: 'flex', flexDirection: 'row'}}>{columnArray}</div>\n      );\n    }\n    return (\n      <div >\n        <div > \n      {\"winner:\" +this.state.winner}\n        </div>\n        {rowArray}\n      </div>\n    );\n  }\n\n  render(){\n    const{style} = this.props;\n\n    return(\n      <div style = {style ? Object.assign({}, styles.container, style): styles.container}>\n        <div>{this.renderBoard()}</div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}